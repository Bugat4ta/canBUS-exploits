import sys
import time
import socket
import signal
from itertools import product
import threading

def send_can_codes(host, port, template, delay):
    num_x = template.count("x")
    if num_x == 0:
        print("Error: Template must contain at least one 'x' for the variable part.")
        return

    max_value = 16 ** num_x

    def signal_handler(sig, frame):
        print("\nExecution stopped by user.")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    def generate_hex_values(num_x):
        return [''.join(chars) for chars in product('0123456789abcdef', repeat=num_x)]

    def send_can_message(can_message):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            try:
                s.connect((host, port))
                s.sendall(can_message.encode())
                print(f"Sent CAN message: {can_message}")
            except Exception as e:
                print(f"Error sending CAN message: {e}")
    
    hex_values = generate_hex_values(num_x)
    
    for hex_str in hex_values:
        can_message = template
        for char in hex_str:
            can_message = can_message.replace("x", char, 1)
        threading.Thread(target=send_can_message, args=(can_message,)).start()
        time.sleep(delay)

def print_syntax():
    print("This script sends a sequence of CAN messages with a variable part over TCP/IP.")
    print("It is useful if you have a CAN-to-TCP bridge.")
    print()
    print("Syntax: python3 seq.py <host> <port> <template> <delay>")
    print("host: the IP address of the CAN-to-TCP bridge")
    print("port: the port number of the CAN-to-TCP bridge")
    print("template: the CAN message to send. Use 'x' as a placeholder for the variable part")
    print("         Example: 19B#0000xx000000")
    print("delay: the delay between messages in seconds")
    print("         Example: 0.1")
    print()
    print("1 x will produce 16 messages. 2 x's will produce 256 messages. 3 x's will produce 4096 messages, etc.")
    print()
    print("Example: python3 seq.py 192.168.1.100 1234 19B#0000xx000000 0.1")

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print_syntax()
        sys.exit(1)

    host = sys.argv[1]
    try:
        port = int(sys.argv[2])
        if port <= 0 or port > 65535:
            raise ValueError("Port must be between 1 and 65535.")
    except ValueError as e:
        print(f"Invalid port value: {e}")
        print_syntax()
        sys.exit(1)
    
    template = sys.argv[3]
    try:
        delay = float(sys.argv[4])
        if delay < 0:
            raise ValueError("Delay must be a non-negative number.")
    except ValueError as e:
        print(f"Invalid delay value: {e}")
        print_syntax()
        sys.exit(1)

    send_can_codes(host, port, template, delay)

